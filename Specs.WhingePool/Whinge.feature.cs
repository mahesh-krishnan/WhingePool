// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18213
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specs.WhingePool
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Whinge")]
    public partial class WhingeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Whinge.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Whinge", "As a whinger, I would like to whinge to a whinge pool", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "StorageAccount",
                        "StorageAccountKey"});
            table1.AddRow(new string[] {
                        "whingepool",
                        "dzYvfFwlBjuZBMp6ahhodxvjJa3R00KL7sos9YHsZatVVr/z71Dr18ZqdEVhSkJJQz5ZGZLoaBK1O6C+k" +
                            "zQZ7Q=="});
#line 5
 testRunner.Given("An Azure Storage Configuration of", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "RegisteredCommandHandlersTableName",
                        "RegisteredCommandHandlersBlobContainerName"});
            table2.AddRow(new string[] {
                        "WhingePoolTestCommandHandlers",
                        "whingepool-test-command-handler-assemblies"});
#line 9
 testRunner.And("A Dynamic Command Handler Configuration of", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "CommandQueueName",
                        "CommandResultsTableName"});
            table3.AddRow(new string[] {
                        "whingepool-test-whinge-queue",
                        "WhingePoolTestCommandResults"});
#line 13
 testRunner.And("A Command Queue Configuration of", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "WhingesTableName",
                        "WhingersTableName",
                        "WhingePoolsTableName",
                        "WhingesByWhingerTableName",
                        "WhingesByWhingePoolTableName"});
            table4.AddRow(new string[] {
                        "WhingePoolTestWhinges",
                        "WhingePoolTestWhingers",
                        "WhingePoolTestWhingePools",
                        "WhingePoolTestWhingesByWhinger",
                        "WhingePoolTestWhingesByWhingePool"});
#line 17
 testRunner.And("A WhingePool Configuration of", ((string)(null)), table4, "And ");
#line 21
 testRunner.And("An ApplicationContext", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And("An Empty WhingersTable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "TwitterHandle"});
            table5.AddRow(new string[] {
                        "johnazariah"});
#line 25
 testRunner.And("A Default Set Of Whingers", ((string)(null)), table5, "And ");
#line 29
 testRunner.And("An Empty WhingePoolsTable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table6.AddRow(new string[] {
                        "Test"});
            table6.AddRow(new string[] {
                        "Work"});
            table6.AddRow(new string[] {
                        "Azure"});
#line 31
 testRunner.And("A Default Set Of WhingePools", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "TwitterHandle"});
            table7.AddRow(new string[] {
                        "johnazariah"});
#line 37
 testRunner.And("The Current Whinger", ((string)(null)), table7, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Save a invalid Whinge of more than 150 characters to an existing WhingePool")]
        public virtual void SaveAInvalidWhingeOfMoreThan150CharactersToAnExistingWhingePool()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save a invalid Whinge of more than 150 characters to an existing WhingePool", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Whinge",
                        "WhingePool"});
            table8.AddRow(new string[] {
                        "I would really like to learn to whinge properly. I really don\'t know how to keep " +
                            "it short enough for Whinger to accept. Why cannot I learn to whinge within a lim" +
                            "it of hundred and fifty characters?",
                        "Test"});
#line 42
 testRunner.When("A whinge is saved", ((string)(null)), table8, "When ");
#line 45
 testRunner.Then("An instance of \"WhingeTooLongException\" exception should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Save a valid Whinge to an existing WhingePool")]
        public virtual void SaveAValidWhingeToAnExistingWhingePool()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save a valid Whinge to an existing WhingePool", ((string[])(null)));
#line 47
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Whinge",
                        "WhingePool"});
            table9.AddRow(new string[] {
                        "This is a really common whinge!",
                        "Test"});
#line 48
 testRunner.When("A whinge is saved", ((string)(null)), table9, "When ");
#line 51
 testRunner.Then("The save should succeed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Save a valid Whinge to an non-existing WhingePool")]
        public virtual void SaveAValidWhingeToAnNon_ExistingWhingePool()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save a valid Whinge to an non-existing WhingePool", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Whinge",
                        "WhingePool"});
            table10.AddRow(new string[] {
                        "I hate having to go to the gym in the cold",
                        "Exercise"});
#line 54
 testRunner.When("A whinge is saved", ((string)(null)), table10, "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table11.AddRow(new string[] {
                        "Exercise"});
#line 57
 testRunner.Then("A WhingePool should be created", ((string)(null)), table11, "Then ");
#line 60
 testRunner.And("The save should succeed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
